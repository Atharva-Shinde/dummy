name: Release
on: 
  workflow_dispatch: 
  push: 
    branches: 
      - main
    paths: 
      - 'CHANGELOG/*.md'
jobs:
  release:
      runs-on: ubuntu-latest
      permissions:
        contents: write
      steps:  
        - name: Checkout code
          uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
          with:
            fetch-depth: 0
        - name: Creating Release Tag
          run: |
            LATEST_CHANGELOG_FILENAME=$(git show --name-only --pretty=format: HEAD | head -n 1)
            echo "Latest changelog file: $LATEST_CHANGELOG_FILENAME"
            RELEASE_VERSION=$(echo "$LATEST_CHANGELOG_FILENAME" | grep -o -E "v[0-9]\.[0-9]\.[0-9](-(alpha|beta|ga))*")
            if [[ -z "$RELEASE_VERSION" ]] ; then 
                echo "Specify correct release version file name" ;
            else
              echo $RELEASE_VERSION
              export RELEASE_VERSION=$RELEASE_VERSION
            fi
            if git tag -l | grep -qwE "$RELEASE_VERSION" ; then
              echo "$RELEASE_VERSION tag already exists" ;
              exit 1
            fi
            git config user.name "${GITHUB_ACTOR}"
            git config user.email "${GITHUB_ACTOR}@no-reply.com"
            git tag -a ${RELEASE_VERSION} -m "Adding ${RELEASE_VERSION}"
            git push origin tag ${RELEASE_VERSION} 
            echo "Created tag $RELEASE_VERSION"
            echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
            echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_OUTPUT
        - name: Release Branch
          run: |
            echo "This is the release version $RELEASE_VERSION"
            if $RELEASE_VERSION | grep -o "(alpha|beta|ga)" ; then
              if git show-ref "refs/remotes/origin/$RELEASE_VERSION" --verify --quiet ; then
                echo "$RELEASE_VERSION branch already exists, exiting"
                exit 1
              fi
              # merge into main
              git checkout -b main
            else
              if git show-ref "refs/remotes/origin/$RELEASE_VERSION" --verify --quiet ; then
                echo "$RELEASE_VERSION branch already exists, exiting"
                exit 1
              fi
              #creating a release branch
              git checkout -b "release-$RELEASE_VERSION"
              git push origin "release-$RELEASE_VERSION"
            fi
        - name: Build Release 
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            tag: ${{ github.ref_name }}
          run: |
            RELEASE_TAG=$(git describe --abbrev=0 2>/dev/null)
            if [ -z "${RELEASE_TAG}" ]; then echo "RELEASE_TAG is not set, exiting"; exit 1; fi
            gh release create ${RELEASE_TAG} \
            --title="${GITHUB_REPOSITORY#*/}" \
            --repo="https://github.com/atharva-shinde/dummy" \
            --notes-file v3.1.1.md
        - name: Set binary path and environment variables
          run: |
            BINARY_PATH=$(pwd)/main
            echo "BIN_PATH=${BINARY_PATH}" >> $GITHUB_ENV
        - name: Generate Artifacts
          run: |
            gh release upload dummy-${{ github.ref_name }}-x86_64 ${{ env.BIN_PATH }} --clobber
