name: Release
on: 
  workflow_dispatch: 
  push: 
    branches: 
      - main
    paths: 
      - 'CHANGELOG/*.md'
jobs:
  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
  #       with:
  #         fetch-depth: 0
  #         repository: 'https://github.com/atharva-shinde/matrices'
  #     - name: Build Application
  #       run: |
  #         wget https://github.com/openshift/source-to-image/releases/download/v1.4.0/source-to-image-v1.4.0-d3544c7e-linux-386.tar.gz
  #         tar -xvf source-to-image-v1.4.0-d3544c7e-linux-386.tar.gz
  #         sudo mv s2i /usr/local/bin
  #         sudo docker login quay.io -u ${{ secrets.USERNAME }} -p ${{ secrets.PASSWORD }}
  #         sudo s2i build https://github.com/atharva-shinde/matrices quay.io/atshinde/matrix-builder-image quay.io/atshinde/matricies
  #         sudo docker push quay.io/atshinde/matricies
  #     - name: Deploy Application
  #       run: |
          
  release:
      runs-on: ubuntu-latest
      permissions:
        contents: write
      steps:  
        - name: Check if tag already exists
          run: |
            LATEST_CHANGELOG_FILENAME=$(git show --name-only --pretty=format: HEAD | head -n 1)
            export RELEASE_VERSION= $LATEST_CHANGELOG_FILENAME | grep -o -E "v[0-9].[0-9].[0-9]-(alpha|beta|ga)" | awk '{print tolower($0)}'
            if !git tag -l $RELEASE_VERSION ; then
              echo "$RELEASE_VERSION tag already exists, exiting"
            else
              git config user.name "${GITHUB_ACTOR}"
              git tag -a ${RELEASE_VERSION} -m "Adding ${RELEASE_VERSION}"
              git push origin tag ${RELEASE_VERSION} 
              echo "Created tag $RELEASE_VERSION"
            fi
        - name: Set env
          run: echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
          env:
            RELEASE_VERSION: $RELEASE_VERSION
        - name: Release Branch
          run: |
            if $RELEASE_VERSION | grep -o (alpha|beta|ga) ; then
              # merge into main
              git checkout -b main
            elif $RELEASE_VERSION | grep -o (alpha|beta|ga) && git show-ref "refs/remotes/origin/$RELEASE_VERSION" --verify --quiet ; then
              echo "$RELEASE_VERSION branch already exists, exiting"
              exit 1
            elif
              #creating a release branch
              git checkout -b "$RELEASE_VERSION"
              git push origin "$RELEASE_VERSION"
        - name: Checkout code
          uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
          with:
            fetch-depth: 0
        - name: Generate Release Artifacts
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
            RELEASE_TAG=$(git describe --abbrev=0 2>/dev/null)
            if [ -z "${RELEASE_TAG}" ]; then echo "RELEASE_TAG is not set, exiting"; exit 1; fi
            gh release create ${RELEASE_TAG} \
            --title="${GITHUB_REPOSITORY#*/}" \
            --repo="https://github.com/atharva-shinde/dummy" \
            --notes-file changelog.md
            